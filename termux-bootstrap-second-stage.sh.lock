

        elif [ ${TERMUX_PACKAGE_MANAGER} = "pacman" ]; then
                # - https://wiki.archlinux.org/title/PKGBUILD#install
                # - https://gitlab.archlinux.org/pacman/pacman/-/blob/v6.1.0/lib/libalpm/add.c#L638-L647
                if [ -d "${TERMUX_PREFIX}/var/lib/pacman/local" ]; then
                        # Package install files exist at `/var/lib/pacman/local/package-version/install`
                        for script_path in "${TERMUX_PREFIX}/var/lib/pacman/local/"*/install; do
                                package_dir="${script_path::-8}"
                                package_dir_basename="${package_dir##*/}"

                                # Extract package `version` in the format `epoch:pkgver-pkgrel`
                                # from the package_dir_basename in the format `package-version`.
                                # Do not use external programs to parse as that would require
                                # adding it as a dependency for second-stage.
                                # - https://wiki.archlinux.org/title/PKGBUILD#Version
                                # Set to anything after last dash "-"
                                local package_version_pkgrel="${package_dir_basename##*-}"
                                # Set to anything before and including last dash "-"
                                local package_name_and_version_pkgver="${package_dir_basename%"$package_version_pkgrel"}"
                                # Trim trailing dash "-"
                                package_name_and_version_pkgver="${package_name_and_version_pkgver%?}"
                                # Set to anything after last dash "-"
                                local package_version_pkgver="${package_name_and_version_pkgver##*-}"
                                # Combine pkgver and pkgrel
                                package_version="$package_version_pkgver-$package_version_pkgrel"
                                if [[ ! "$package_version" =~ ^([0-9]+:)?[^-]+-[^-]+$ ]]; then
                                        log_error "The package_version '$package_version' extracted from package_dir_basename '$package_dir_basename' is not valid"
                                        return 1
                                fi

                                log "Running '$package_dir_basename' package post_install"

                                (
                                        # As per `pacman` install docs:
                                        # > Each function is run chrooted inside the pacman install directory. See this thread.
                                        # The `RootDir` is chrooted into and then the
                                        # current working directory is changed to `/`.
                                        # - https://bbs.archlinux.org/viewtopic.php?pid=913891
                                        # - https://man.archlinux.org/man/pacman.conf.5.en#OPTIONS
                                        # - https://gitlab.archlinux.org/pacman/pacman/-/blob/v6.1.0/src/pacman/conf.c#L855
                                        # - https://gitlab.archlinux.org/pacman/pacman/-/blob/v6.1.0/lib/libalpm/alpm.c#L47
                                        # - https://gitlab.archlinux.org/pacman/pacman/-/blob/v6.1.0/lib/libalpm/alpm.h#L1663-L1676
                                        # - https://gitlab.archlinux.org/pacman/pacman/-/blob/v6.1.0/lib/libalpm/util.c#L657-L668
                                        # - https://man7.org/linux/man-pages/man2/chroot.2.html
                                        # But since Android apps cannot run chroot
                                        # without root access, chroot is disabled by
                                        # Termux pacman package and only current working
                                        # directory is changed to the Android rootfs `/`.
                                        # Note that Termux rootfs is under private app
                                        # data directory `/data/data/<package_name>,`
                                        # which may cause problems for packages which try
                                        # to use Android rootfs paths instead of Termux
                                        # rootfs paths.
                                        # - https://github.com/termux/termux-packages/blob/953b9f2aac0dc94f3b99b2df6af898e0a95d5460/packages/pacman/util.c.patch
                                        cd "/" || exit $?

                                        # Source the package `install` file and execute
                                        # `post_install` function if defined.

                                        # Unset function if already defined in the env
                                        unset -f post_install || exit $?

                                        # shellcheck disable=SC1090
                                        source "$script_path"
                                        return_value=$?
                                        if [ $return_value -ne 0 ]; then
                                                log_error "Failed to source '$package_dir_basename' package install install"
                                                exit $return_value
                                        fi

                                        if [[ "$(type -t post_install 2>/dev/null)" == "function" ]]; then
                                                # cd again in case install file sourced changed the directory.
                                                cd "/" || exit $?

                                                # Execute the post_install function and exit
                                                # with failure if it fails as that implies
                                                # that bootstrap setup failed.
                                                # The package version is the first argument.
                                                # Check `PKGBUILD#install` docs for more info.
                                                post_install "$package_version"
                                                return_value=$?
                                                if [ $return_value -ne 0 ]; then

       log_error "Failed to run '$package_dir_basename' package post_install"
                                                        exit $return_value
                                                fi
                                        fi
                                ) || return $?
                        done
                fi
        fi

        return 0

}

# If running in bash, run script logic, otherwise exit with usage error
if [ -n "${BASH_VERSION:-}" ]; then
        # If script is sourced, return with error, otherwise call main function
        # - https://stackoverflow.com/a/28776166/14686958
        # - https://stackoverflow.com/a/29835459/14686958
        if (return 0 2>/dev/null); then
                echo "${0##*/} cannot be sourced as \"\$0\" is required." 1>&2
                return 64 # EX__USAGE
        else
                main "$@"
                exit $?
        fi
else
        (echo "${0##*/} must be run with the bash shell."; exit 64) # EX__USAGE
fi
